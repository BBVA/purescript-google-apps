
exports.clearWarningsImpl = (p_) => () => {
  return p_.clearWarnings();
}

exports.closeImpl = (p_) => () => {
  return p_.close();
}

exports.commitImpl = (p_) => () => {
  return p_.commit();
}

exports.createArrayOfImpl = (typeName) => (elements) => (p_) => () => {
  return p_.createArrayOf(typeName, elements);
}

exports.createBlobImpl = (p_) => () => {
  return p_.createBlob();
}

exports.createClobImpl = (p_) => () => {
  return p_.createClob();
}

exports.createNClobImpl = (p_) => () => {
  return p_.createNClob();
}

exports.createSqlxmlImpl = (p_) => () => {
  return p_.createSQLXML();
}

exports.createStatementImpl = (p_) => () => {
  return p_.createStatement();
}

exports.createStatementWithIntegerIntegerImpl = (resultSetType) => (resultSetConcurrency) => (p_) => () => {
  return p_.createStatement(resultSetType, resultSetConcurrency);
}

exports.createStatementWithIntegerIntegerIntegerImpl = (resultSetType) => (resultSetConcurrency) => (resultSetHoldability) => (p_) => () => {
  return p_.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
}

exports.createStructImpl = (typeName) => (attributes) => (p_) => () => {
  return p_.createStruct(typeName, attributes);
}

exports.getAutoCommitImpl = (p_) => () => {
  return p_.getAutoCommit();
}

exports.getCatalogImpl = (p_) => () => {
  return p_.getCatalog();
}

exports.getHoldabilityImpl = (p_) => () => {
  return p_.getHoldability();
}

exports.getMetaDataImpl = (p_) => () => {
  return p_.getMetaData();
}

exports.getTransactionIsolationImpl = (p_) => () => {
  return p_.getTransactionIsolation();
}

exports.getWarningsImpl = (p_) => () => {
  return p_.getWarnings();
}

exports.isClosedImpl = (p_) => () => {
  return p_.isClosed();
}

exports.isReadOnlyImpl = (p_) => () => {
  return p_.isReadOnly();
}

exports.isValidImpl = (timeout) => (p_) => () => {
  return p_.isValid(timeout);
}

exports.nativeSqlImpl = (sql) => (p_) => () => {
  return p_.nativeSQL(sql);
}

exports.prepareCallWithStringImpl = (sql) => (p_) => () => {
  return p_.prepareCall(sql);
}

exports.prepareCallWithStringIntegerIntegerImpl = (sql) => (resultSetType) => (resultSetConcurrency) => (p_) => () => {
  return p_.prepareCall(sql, resultSetType, resultSetConcurrency);
}

exports.prepareCallWithStringIntegerIntegerIntegerImpl = (sql) => (resultSetType) => (resultSetConcurrency) => (resultSetHoldability) => (p_) => () => {
  return p_.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
}

exports.prepareStatementWithStringImpl = (sql) => (p_) => () => {
  return p_.prepareStatement(sql);
}

exports.prepareStatementWithStringIntegerImpl = (sql) => (autoGeneratedKeys) => (p_) => () => {
  return p_.prepareStatement(sql, autoGeneratedKeys);
}

exports.prepareStatementWithStringIntegerIntegerImpl = (sql) => (resultSetType) => (resultSetConcurrency) => (p_) => () => {
  return p_.prepareStatement(sql, resultSetType, resultSetConcurrency);
}

exports.prepareStatementWithStringIntegerIntegerIntegerImpl = (sql) => (resultSetType) => (resultSetConcurrency) => (resultSetHoldability) => (p_) => () => {
  return p_.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
}

exports.prepareStatementByIndexImpl = (sql) => (indices) => (p_) => () => {
  return p_.prepareStatementByIndex(sql, indices);
}

exports.prepareStatementByNameImpl = (sql) => (columnNames) => (p_) => () => {
  return p_.prepareStatementByName(sql, columnNames);
}

exports.releaseSavepointImpl = (savepoint) => (p_) => () => {
  return p_.releaseSavepoint(savepoint);
}

exports.rollbackImpl = (p_) => () => {
  return p_.rollback();
}

exports.rollbackWithJdbcsavepointImpl = (savepoint) => (p_) => () => {
  return p_.rollback(savepoint);
}

exports.setAutoCommitImpl = (autoCommit) => (p_) => () => {
  return p_.setAutoCommit(autoCommit);
}

exports.setCatalogImpl = (catalog) => (p_) => () => {
  return p_.setCatalog(catalog);
}

exports.setHoldabilityImpl = (holdability) => (p_) => () => {
  return p_.setHoldability(holdability);
}

exports.setReadOnlyImpl = (readOnly) => (p_) => () => {
  return p_.setReadOnly(readOnly);
}

exports.setSavepointImpl = (p_) => () => {
  return p_.setSavepoint();
}

exports.setSavepointWithStringImpl = (name) => (p_) => () => {
  return p_.setSavepoint(name);
}

exports.setTransactionIsolationImpl = (level) => (p_) => () => {
  return p_.setTransactionIsolation(level);
}
